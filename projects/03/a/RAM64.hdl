// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
	Mux8Way16 (a[0..15]=ramouta, b[0..15]=ramoutb, c[0..15]=ramoutc, d[0..15]=ramoutd, e[0..15]=ramoute, f[0..15]=ramoutf, g[0..15]=ramoutg, h[0..15]=ramouth, sel[0..2]=address[0..2], out[0..15]=out[0..15]);
	DMux8Way (sel[0..2]=address[0..2], in=load, a=loada, b=loadb, c=loadc, d=loadd, e=loade, f=loadf, g=loadg, h=loadh);
	RAM8 (in[0..15]=in[0..15], load=loada, address[0..2]=address[3..5], out[0..15]=ramouta);
	RAM8 (in[0..15]=in[0..15], load=loadb, address[0..2]=address[3..5], out[0..15]=ramoutb);
	RAM8 (in[0..15]=in[0..15], load=loadc, address[0..2]=address[3..5], out[0..15]=ramoutc);
	RAM8 (in[0..15]=in[0..15], load=loadd, address[0..2]=address[3..5], out[0..15]=ramoutd);
	RAM8 (in[0..15]=in[0..15], load=loade, address[0..2]=address[3..5], out[0..15]=ramoute);
	RAM8 (in[0..15]=in[0..15], load=loadf, address[0..2]=address[3..5], out[0..15]=ramoutf);
	RAM8 (in[0..15]=in[0..15], load=loadg, address[0..2]=address[3..5], out[0..15]=ramoutg);
	RAM8 (in[0..15]=in[0..15], load=loadh, address[0..2]=address[3..5], out[0..15]=ramouth);
}